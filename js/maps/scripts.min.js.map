{"version":3,"sources":["0_ui-module.js","1_body-module.js","2_ajax-module.js","3_data-init-module.js","4_filter-module.js","5_add-module.js","7_event-module.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../scripts.min.js","sourcesContent":["var UIModule = (function () {\r\n  var elements = {\r\n    all: document.getElementById('all'),\r\n    offline: document.getElementById('offline'),\r\n    online: document.getElementById('online'),\r\n    refresh: document.getElementById('refresh'),\r\n    wrapper: document.getElementById('streams'),\r\n    loader: document.getElementById('loader'),\r\n    submitNewStream: document.getElementById('submitNewStream'),\r\n    inputNewStream: document.getElementById('inputNewStream')\r\n\r\n  };\r\n  return elements;\r\n})();\r\n","var BodyModule = (function (AjaxModule, UIModule) {\r\n  // contructor of streams\r\n  function Stream(mode, fps, viewers, game) {\r\n    this.mode = mode;\r\n    this.fps = fps;\r\n    this.viewers = viewers;\r\n    this.game = game;\r\n  }\r\n\r\n  // get name of stream\r\n  function getStreamIndex(clickedElement) {\r\n    var streamToRemove = clickedElement.parentElement.parentElement;\r\n    var currentStreamList = UIModule.wrapper.children;\r\n    var index = Array.prototype.indexOf.call(currentStreamList, streamToRemove);\r\n    return index;\r\n  }\r\n\r\n  function hideLoader() {\r\n    UIModule.loader.style.display = 'none';\r\n  }\r\n\r\n  function showLoader() {\r\n    UIModule.loader.style.display = 'block';\r\n  }\r\n\r\n  // reset appended streams to body\r\n  function resetBody() {\r\n    UIModule.wrapper.innerHTML = '';\r\n  }\r\n\r\n  // render streams to body\r\n  function renderBody(objectArray) {\r\n    objectArray.forEach(function (obj) {\r\n      // set stream container\r\n      var stream = document.createElement('div');\r\n      stream.className = 'streams__stream stream';\r\n      // set logo\r\n      var logoContainer = document.createElement('div');\r\n      var logo = document.createElement('img');\r\n      logoContainer.className = 'stream__logo';\r\n      logo.className = 'stream__image';\r\n      if (obj.logo === null) {\r\n        var logoBackup = 'https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_70x70.png';\r\n        logo.src = logoBackup;\r\n      } else {\r\n        logo.src = obj.logo;\r\n      }\r\n      logoContainer.appendChild(logo);\r\n      stream.appendChild(logoContainer);\r\n      // set description\r\n      var descriptionContainer = document.createElement('div');\r\n      descriptionContainer.className = 'stream__description';\r\n      stream.appendChild(descriptionContainer);\r\n      // set delete\r\n      var deleteContainer = document.createElement('div');\r\n      deleteContainer.className = 'stream__delete';\r\n      stream.appendChild(deleteContainer);\r\n      // set delete button\r\n      var deleteButton = document.createElement('button');\r\n      deleteButton.className = 'stream__button';\r\n      deleteButton.innerText = 'X';\r\n      deleteContainer.appendChild(deleteButton);\r\n      // set streamtext\r\n      var streamText = document.createElement('p');\r\n      streamText.className = 'stream__text';\r\n      descriptionContainer.appendChild(streamText);\r\n      var link = document.createElement('a');\r\n      link.href = obj.link;\r\n      link.innerText = obj.name;\r\n      streamText.appendChild(link);\r\n      // check if online\r\n      if (obj.mode === 'online') {\r\n        stream.className += ' online';\r\n        streamText.innerHTML += '<br> is currently streaming ' + obj.game;\r\n        // set stream status\r\n        var status = document.createElement('p');\r\n        status.className = 'stream__status';\r\n        status.innerText = obj.status;\r\n        descriptionContainer.appendChild(status);\r\n        // set stream status\r\n        var stats = document.createElement('p');\r\n        stats.className = 'stream__info';\r\n        stats.innerHTML = 'Viewers: ' + obj.viewers + ' Average FPS: ' + obj.fps.toFixed(0);\r\n        descriptionContainer.appendChild(stats);\r\n      } else {\r\n        stream.className += ' offline';\r\n        streamText.innerHTML += '<br> is currently offline';\r\n      }\r\n      // set stream to wrapper\r\n      UIModule.wrapper.appendChild(stream);\r\n    });\r\n  }\r\n\r\n  return {\r\n    Stream: Stream,\r\n    renderBody: renderBody,\r\n    resetBody: resetBody,\r\n    hideLoader: hideLoader,\r\n    showLoader: showLoader,\r\n    getStreamIndex: getStreamIndex\r\n  };\r\n})(AjaxModule, UIModule);\r\n","var AjaxModule = (function (BodyModule) {\r\n  var apiKey = '?client_id=ky7lf42bjej2jqwucrksw329r50o4c';\r\n  var urlStreams = 'https://api.twitch.tv/kraken/streams/';\r\n  var urlChannels = 'https://api.twitch.tv/kraken/channels/';\r\n\r\n  // set promise based on url\r\n  function getData(url) {\r\n    return new Promise(function (resolve, reject) {\r\n      var xhttp = new XMLHttpRequest();\r\n      xhttp.open('GET', url, true);\r\n      xhttp.onload = function () {\r\n        if (xhttp.status === 200) {\r\n          resolve(JSON.parse(xhttp.response));\r\n        } else {\r\n          reject(xhttp.statusText);\r\n        }\r\n      };\r\n      xhttp.onerror = function () {\r\n        reject(xhttp.statusText);\r\n      };\r\n      xhttp.send();\r\n    });\r\n  }\r\n\r\n  // handle first api response, set object from stream constructor\r\n  function handleFirstResponse(data, i, objectArray) {\r\n    if (data.stream === null) {\r\n      objectArray[i] = new BodyModule.Stream('offline', null, null, null);\r\n    } else {\r\n      objectArray[i] = new BodyModule.Stream('online', data.stream.average_fps, data.stream.viewers, data.stream.game);\r\n    }\r\n  }\r\n  // handle second api response, set rest of extra values to obj\r\n  function handleSecondResponse(data, i, objectArray) {\r\n    objectArray[i].name = data.display_name;\r\n    objectArray[i].link = data.url;\r\n    objectArray[i].logo = data.logo;\r\n    objectArray[i].banner = data.profile_banner;\r\n    objectArray[i].status = data.status;\r\n  }\r\n\r\n  // summary function of base ajax request\r\n  function downloadData(i, streamsArray, objectArray) {\r\n    return getData(urlStreams + streamsArray[i] + apiKey)\r\n    .then(function (data) {\r\n      handleFirstResponse(data, i, objectArray);\r\n      return getData(urlChannels + streamsArray[i] + apiKey);\r\n    })\r\n    .then(function (data) {\r\n      handleSecondResponse(data, i, objectArray);\r\n    });\r\n  }\r\n\r\n  // function for single data download\r\n  function addSingleData(name, singleStream) {\r\n    return getData(urlStreams + name + apiKey)\r\n    .then(function (data) {\r\n      console.log(data);\r\n      if (data.stream === null) {\r\n        singleStream = new BodyModule.Stream('offline', null, null, null);\r\n      } else {\r\n        singleStream = new BodyModule.Stream('online', data.stream.average_fps, data.stream.viewers, data.stream.game);\r\n      }\r\n      return getData(urlChannels + name + apiKey);\r\n    })\r\n    .then(function (data) {\r\n      singleStream.name = data.display_name;\r\n      singleStream.link = data.url;\r\n      singleStream.logo = data.logo;\r\n      singleStream.banner = data.profile_banner;\r\n      singleStream.status = data.status;\r\n      return singleStream;\r\n    }).catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  return {\r\n    downloadData: downloadData,\r\n    addSingleData: addSingleData\r\n  };\r\n})(BodyModule);\r\n","var DataModule = (function (AjaxModule, BodyModule, UIModule, AddModule) {\r\n  var streamsArray;\r\n  var objectArray = [];\r\n  var promises = [];\r\n  streamsArray = ['arroneagleheart', 'dreamhackcs', 'skyzhar', 'freecodecamp', 'faceittv', 'terakilobyte', 'robotcaleb', 'sheevergaming', 'esl_sc2', 'ogamingsc2', 'jacksofamerica'];\r\n\r\n  // get promises based on basearray\r\n  function setPromises(baseArray, targetArray) {\r\n    for (var i = 0; i < streamsArray.length - 1; i++) {\r\n      promises[i] = AjaxModule.downloadData(i, baseArray, targetArray);\r\n    }\r\n  }\r\n\r\n  // use promises with a callback\r\n  function useDataFromPromises(callback) {\r\n    Promise.all(promises).then(callback);\r\n  }\r\n\r\n  // get actual list of strems\r\n  function getObjectArray() {\r\n    return objectArray;\r\n  }\r\n\r\n  // remove stream form list of streams\r\n  function deleteStream(target) {\r\n    DataModule.unsetStream(BodyModule.getStreamIndex(target));\r\n    BodyModule.resetBody();\r\n    var objectArray = DataModule.getObjectArray();\r\n    BodyModule.renderBody(objectArray);\r\n  }\r\n\r\n  // refresh actual list of streams\r\n  function refresh() {\r\n    BodyModule.showLoader();\r\n    BodyModule.resetBody();\r\n    setPromises(getActualListOfNames(), objectArray);\r\n    useDataFromPromises(function () {\r\n      BodyModule.renderBody(objectArray);\r\n      BodyModule.hideLoader();\r\n    });\r\n  }\r\n\r\n  // get acutal list of strims\r\n  function getActualListOfNames() {\r\n    var baseArray = getObjectArray();\r\n    var array = baseArray.map(function (val) {\r\n      return val.name.toLowerCase().replace(' ', '');\r\n    });\r\n    return array;\r\n  }\r\n\r\n  // set stream to begging of array\r\n  function setStream(stream) {\r\n    objectArray.unshift(stream);\r\n  }\r\n  // delete stream based on index\r\n  function unsetStream(index) {\r\n    objectArray.splice(index, 1);\r\n  }\r\n\r\n  // INIT DOWNLOADING DEFAULT DATA\r\n  setPromises(streamsArray, objectArray);\r\n  useDataFromPromises(function () {\r\n    BodyModule.renderBody(objectArray);\r\n    BodyModule.hideLoader();\r\n  });\r\n\r\n  return {\r\n    getObjectArray: getObjectArray,\r\n    refresh: refresh,\r\n    setStream: setStream,\r\n    unsetStream: unsetStream,\r\n    deleteStream: deleteStream\r\n  };\r\n})(AjaxModule, BodyModule, UIModule, AddModule);\r\n","var FilterModule = (function (DataModule, BodyModule) {\r\n  function filter() {\r\n    // check if online, offline or all is clicked\r\n    var mode = this.id;\r\n    // get actual array with data\r\n    var objectArray = DataModule.getObjectArray();\r\n    // filter this array\r\n    var filteredArray = objectArray.filter(function (stream) {\r\n      // if all is cliced let all elements\r\n      if (mode === 'all') {\r\n        return true;\r\n      }\r\n      // if online or offline filter\r\n      return stream.mode === mode;\r\n    });\r\n    // render by filtered mode\r\n    BodyModule.resetBody();\r\n    BodyModule.renderBody(filteredArray);\r\n  }\r\n  return {\r\n    filter: filter\r\n  };\r\n})(DataModule, BodyModule);\r\n","var AddModule = (function (BodyModule, DataModule, AjaxModule, UIModule) {\r\n  function addStream() {\r\n    BodyModule.showLoader();\r\n    BodyModule.resetBody();\r\n    var singleStream;\r\n    var name = UIModule.inputNewStream.value;\r\n    AjaxModule.addSingleData(name, singleStream).then(function (data) {\r\n      if (data) {\r\n        singleDataSuccess(data);\r\n      } else {\r\n        singleDataError();\r\n      }\r\n    }).catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  function singleDataSuccess(data) {\r\n    UIModule.inputNewStream.value = '';\r\n    DataModule.setStream(data);\r\n    var objectArray = DataModule.getObjectArray();\r\n    BodyModule.renderBody(objectArray);\r\n    BodyModule.hideLoader();\r\n  }\r\n\r\n  function singleDataError() {\r\n    UIModule.inputNewStream.value = '';\r\n    alert('nie ma takiego strima');\r\n    BodyModule.hideLoader();\r\n    var objectArray = DataModule.getObjectArray();\r\n    BodyModule.renderBody(objectArray);\r\n  }\r\n  return {\r\n    addStream: addStream\r\n  };\r\n})(BodyModule, DataModule, AjaxModule, UIModule);\r\n","var EventModule = (function (FilterModule, DataModule, BodyModule, UIModule, AjaxModule, AddModule) {\r\n\r\n  // event listeners;\r\n  UIModule.all.addEventListener('click', FilterModule.filter);\r\n  UIModule.offline.addEventListener('click', FilterModule.filter);\r\n  UIModule.online.addEventListener('click', FilterModule.filter);\r\n  UIModule.refresh.addEventListener('click', DataModule.refresh);\r\n  UIModule.submitNewStream.addEventListener('click', AddModule.addStream);\r\n  UIModule.wrapper.addEventListener('click', function (e) {\r\n    if (e.target.matches('button')) {\r\n      DataModule.deleteStream(e.target);\r\n    }\r\n  });\r\n\r\n\r\n})(FilterModule, DataModule, BodyModule, UIModule, AjaxModule, AddModule);\r\n"]}