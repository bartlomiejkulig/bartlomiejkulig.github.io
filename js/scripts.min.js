var UIModule = (function () {
  var elements = {
    all: document.getElementById('all'),
    offline: document.getElementById('offline'),
    online: document.getElementById('online'),
    refresh: document.getElementById('refresh'),
    wrapper: document.getElementById('streams'),
    loader: document.getElementById('loader'),
    submitNewStream: document.getElementById('submitNewStream'),
    inputNewStream: document.getElementById('inputNewStream')

  };
  return elements;
})();

var BodyModule = (function (AjaxModule, UIModule) {
  // contructor of streams
  function Stream(mode, fps, viewers, game) {
    this.mode = mode;
    this.fps = fps;
    this.viewers = viewers;
    this.game = game;
  }

  // get name of stream
  function getStreamIndex(clickedElement) {
    var streamToRemove = clickedElement.parentElement.parentElement;
    var currentStreamList = UIModule.wrapper.children;
    var index = Array.prototype.indexOf.call(currentStreamList, streamToRemove);
    return index;
  }

  function hideLoader() {
    UIModule.loader.style.display = 'none';
  }

  function showLoader() {
    UIModule.loader.style.display = 'block';
  }

  // reset appended streams to body
  function resetBody() {
    UIModule.wrapper.innerHTML = '';
  }

  // render streams to body
  function renderBody(objectArray) {
    objectArray.forEach(function (obj) {
      // set stream container
      var stream = document.createElement('div');
      stream.className = 'streams__stream stream';
      // set logo
      var logoContainer = document.createElement('div');
      var logo = document.createElement('img');
      logoContainer.className = 'stream__logo';
      logo.className = 'stream__image';
      if (obj.logo === null) {
        var logoBackup = 'https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_70x70.png';
        logo.src = logoBackup;
      } else {
        logo.src = obj.logo;
      }
      logoContainer.appendChild(logo);
      stream.appendChild(logoContainer);
      // set description
      var descriptionContainer = document.createElement('div');
      descriptionContainer.className = 'stream__description';
      stream.appendChild(descriptionContainer);
      // set delete
      var deleteContainer = document.createElement('div');
      deleteContainer.className = 'stream__delete';
      stream.appendChild(deleteContainer);
      // set delete button
      var deleteButton = document.createElement('button');
      deleteButton.className = 'stream__button';
      deleteButton.innerText = 'X';
      deleteContainer.appendChild(deleteButton);
      // set streamtext
      var streamText = document.createElement('p');
      streamText.className = 'stream__text';
      descriptionContainer.appendChild(streamText);
      var link = document.createElement('a');
      link.href = obj.link;
      link.innerText = obj.name;
      streamText.appendChild(link);
      // check if online
      if (obj.mode === 'online') {
        stream.className += ' online';
        streamText.innerHTML += '<br> is currently streaming ' + obj.game;
        // set stream status
        var status = document.createElement('p');
        status.className = 'stream__status';
        status.innerText = obj.status;
        descriptionContainer.appendChild(status);
        // set stream status
        var stats = document.createElement('p');
        stats.className = 'stream__info';
        stats.innerHTML = 'Viewers: ' + obj.viewers + ' Average FPS: ' + obj.fps.toFixed(0);
        descriptionContainer.appendChild(stats);
      } else {
        stream.className += ' offline';
        streamText.innerHTML += '<br> is currently offline';
      }
      // set stream to wrapper
      UIModule.wrapper.appendChild(stream);
    });
  }

  return {
    Stream: Stream,
    renderBody: renderBody,
    resetBody: resetBody,
    hideLoader: hideLoader,
    showLoader: showLoader,
    getStreamIndex: getStreamIndex
  };
})(AjaxModule, UIModule);

var AjaxModule = (function (BodyModule) {
  var apiKey = '?client_id=ky7lf42bjej2jqwucrksw329r50o4c';
  var urlStreams = 'https://api.twitch.tv/kraken/streams/';
  var urlChannels = 'https://api.twitch.tv/kraken/channels/';

  // set promise based on url
  function getData(url) {
    return new Promise(function (resolve, reject) {
      var xhttp = new XMLHttpRequest();
      xhttp.open('GET', url, true);
      xhttp.onload = function () {
        if (xhttp.status === 200) {
          resolve(JSON.parse(xhttp.response));
        } else {
          reject(xhttp.statusText);
        }
      };
      xhttp.onerror = function () {
        reject(xhttp.statusText);
      };
      xhttp.send();
    });
  }

  // handle first api response, set object from stream constructor
  function handleFirstResponse(data, i, objectArray) {
    if (data.stream === null) {
      objectArray[i] = new BodyModule.Stream('offline', null, null, null);
    } else {
      objectArray[i] = new BodyModule.Stream('online', data.stream.average_fps, data.stream.viewers, data.stream.game);
    }
  }
  // handle second api response, set rest of extra values to obj
  function handleSecondResponse(data, i, objectArray) {
    objectArray[i].name = data.display_name;
    objectArray[i].link = data.url;
    objectArray[i].logo = data.logo;
    objectArray[i].banner = data.profile_banner;
    objectArray[i].status = data.status;
  }

  // summary function of base ajax request
  function downloadData(i, streamsArray, objectArray) {
    return getData(urlStreams + streamsArray[i] + apiKey)
    .then(function (data) {
      handleFirstResponse(data, i, objectArray);
      return getData(urlChannels + streamsArray[i] + apiKey);
    })
    .then(function (data) {
      handleSecondResponse(data, i, objectArray);
    });
  }

  // function for single data download
  function addSingleData(name, singleStream) {
    return getData(urlStreams + name + apiKey)
    .then(function (data) {
      console.log(data);
      if (data.stream === null) {
        singleStream = new BodyModule.Stream('offline', null, null, null);
      } else {
        singleStream = new BodyModule.Stream('online', data.stream.average_fps, data.stream.viewers, data.stream.game);
      }
      return getData(urlChannels + name + apiKey);
    })
    .then(function (data) {
      singleStream.name = data.display_name;
      singleStream.link = data.url;
      singleStream.logo = data.logo;
      singleStream.banner = data.profile_banner;
      singleStream.status = data.status;
      return singleStream;
    }).catch(function (error) {
      console.log(error);
    });
  }

  return {
    downloadData: downloadData,
    addSingleData: addSingleData
  };
})(BodyModule);

var DataModule = (function (AjaxModule, BodyModule, UIModule, AddModule) {
  var streamsArray;
  var objectArray = [];
  var promises = [];
  streamsArray = ['arroneagleheart', 'dreamhackcs', 'skyzhar', 'freecodecamp', 'faceittv', 'terakilobyte', 'robotcaleb', 'sheevergaming', 'esl_sc2', 'ogamingsc2', 'jacksofamerica'];

  // get promises based on basearray
  function setPromises(baseArray, targetArray) {
    for (var i = 0; i < streamsArray.length - 1; i++) {
      promises[i] = AjaxModule.downloadData(i, baseArray, targetArray);
    }
  }

  // use promises with a callback
  function useDataFromPromises(callback) {
    Promise.all(promises).then(callback);
  }

  // get actual list of strems
  function getObjectArray() {
    return objectArray;
  }

  // remove stream form list of streams
  function deleteStream(target) {
    DataModule.unsetStream(BodyModule.getStreamIndex(target));
    BodyModule.resetBody();
    var objectArray = DataModule.getObjectArray();
    BodyModule.renderBody(objectArray);
  }

  // refresh actual list of streams
  function refresh() {
    BodyModule.showLoader();
    BodyModule.resetBody();
    setPromises(getActualListOfNames(), objectArray);
    useDataFromPromises(function () {
      BodyModule.renderBody(objectArray);
      BodyModule.hideLoader();
    });
  }

  // get acutal list of strims
  function getActualListOfNames() {
    var baseArray = getObjectArray();
    var array = baseArray.map(function (val) {
      return val.name.toLowerCase().replace(' ', '');
    });
    return array;
  }

  // set stream to begging of array
  function setStream(stream) {
    objectArray.unshift(stream);
  }
  // delete stream based on index
  function unsetStream(index) {
    objectArray.splice(index, 1);
  }

  // INIT DOWNLOADING DEFAULT DATA
  setPromises(streamsArray, objectArray);
  useDataFromPromises(function () {
    BodyModule.renderBody(objectArray);
    BodyModule.hideLoader();
  });

  return {
    getObjectArray: getObjectArray,
    refresh: refresh,
    setStream: setStream,
    unsetStream: unsetStream,
    deleteStream: deleteStream
  };
})(AjaxModule, BodyModule, UIModule, AddModule);

var FilterModule = (function (DataModule, BodyModule) {
  function filter() {
    // check if online, offline or all is clicked
    var mode = this.id;
    // get actual array with data
    var objectArray = DataModule.getObjectArray();
    // filter this array
    var filteredArray = objectArray.filter(function (stream) {
      // if all is cliced let all elements
      if (mode === 'all') {
        return true;
      }
      // if online or offline filter
      return stream.mode === mode;
    });
    // render by filtered mode
    BodyModule.resetBody();
    BodyModule.renderBody(filteredArray);
  }
  return {
    filter: filter
  };
})(DataModule, BodyModule);

var AddModule = (function (BodyModule, DataModule, AjaxModule, UIModule) {
  function addStream() {
    BodyModule.showLoader();
    BodyModule.resetBody();
    var singleStream;
    var name = UIModule.inputNewStream.value;
    AjaxModule.addSingleData(name, singleStream).then(function (data) {
      if (data) {
        singleDataSuccess(data);
      } else {
        singleDataError();
      }
    }).catch(function (error) {
      console.log(error);
    });
  }

  function singleDataSuccess(data) {
    UIModule.inputNewStream.value = '';
    DataModule.setStream(data);
    var objectArray = DataModule.getObjectArray();
    BodyModule.renderBody(objectArray);
    BodyModule.hideLoader();
  }

  function singleDataError() {
    UIModule.inputNewStream.value = '';
    alert('nie ma takiego strima');
    BodyModule.hideLoader();
    var objectArray = DataModule.getObjectArray();
    BodyModule.renderBody(objectArray);
  }
  return {
    addStream: addStream
  };
})(BodyModule, DataModule, AjaxModule, UIModule);

var EventModule = (function (FilterModule, DataModule, BodyModule, UIModule, AjaxModule, AddModule) {

  // event listeners;
  UIModule.all.addEventListener('click', FilterModule.filter);
  UIModule.offline.addEventListener('click', FilterModule.filter);
  UIModule.online.addEventListener('click', FilterModule.filter);
  UIModule.refresh.addEventListener('click', DataModule.refresh);
  UIModule.submitNewStream.addEventListener('click', AddModule.addStream);
  UIModule.wrapper.addEventListener('click', function (e) {
    if (e.target.matches('button')) {
      DataModule.deleteStream(e.target);
    }
  });


})(FilterModule, DataModule, BodyModule, UIModule, AjaxModule, AddModule);

//# sourceMappingURL=maps/scripts.min.js.map
